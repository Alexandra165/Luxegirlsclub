// üîç –ü–æ–ª—É—á–∞–µ–º cookie –ø–æ –∏–º–µ–Ω–∏
function getCookie(name) {
    let matches = document.cookie.match(new RegExp(
        "(?:^|; )" + name.replace(/([.*+?^${}()|[\]\\])/g, '\\$1') + "=([^;]*)"
    ));
    return matches ? decodeURIComponent(matches[1]) : undefined;
}

// üîê –ì–ª–æ–±–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º userEmail
const userEmail = localStorage.getItem("userEmail") || getCookie("userEmail");

// ‚è±Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping, —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ç—É—Å online
if (userEmail) {
    setInterval(() => {
        fetch("/api/ping", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email: userEmail })
        }).then(res => {
            if (!res.ok) {
                console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ping");
            }
        }).catch(err => {
            console.error("‚ùå –û—à–∏–±–∫–∞ ping:", err);
        });
    }, 60000); // –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
}

// üì¶ –ö–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
document.addEventListener("DOMContentLoaded", async () => {
    if (!userEmail) {
        alert("‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
        return;
    }

    console.log("üìß –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è email:", userEmail);

    try {
        const profileRes = await fetch("/api/get-profile", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ email: userEmail })
        });

        const profileData = await profileRes.json();
        console.log("üì¶ –û—Ç–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è:", profileData);

        if (profileData.status !== "success") {
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è");
            return;
        }

        const p = profileData.profile;

        // ‚úÖ –£—Å–ª—É–≥–∏ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏ –æ—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        const serviceRes = await fetch("/api/get-services");
        const serviceList = await serviceRes.json();
        const container = document.getElementById("services-container");
        container.innerHTML = "";

        const selectedServices = (p.services || []).map(s => s.trim());
        serviceList.forEach(service => {
            const label = document.createElement("label");
            label.className = "service-checkbox";
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.value = service;
            checkbox.name = "services";
            if (selectedServices.includes(service)) {
                checkbox.checked = true;
            }
            label.appendChild(checkbox);
            label.appendChild(document.createTextNode(service));
            container.appendChild(label);
        });

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        fillBasicProfile(p);
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
        loadMedia(p);
document.getElementById("newPhotos").addEventListener("change", function () {
document.getElementById("uploadStatus").style.display = "block";
    const files = Array.from(this.files);
    if (!files || files.length === 0) return;

    const allowedTypes = ["image/jpeg", "image/png", "image/gif"];
    const maxSizeMB = 5;
    const maxFiles = 10;

    // ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
    if (files.length > maxFiles) {
        alert(`‚ùå –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º ${maxFiles} —Ñ–æ—Ç–æ –∑–∞ —Ä–∞–∑.`);
        return;
    }

    let validFiles = files.filter(file => {
        if (!allowedTypes.includes(file.type)) {
            alert(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${file.name}`);
            return false;
        }
        if (file.size > maxSizeMB * 1024 * 1024) {
            alert(`‚ùå ${file.name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${maxSizeMB}MB`);
            return false;
        }
        return true;
    });

    if (validFiles.length === 0) {
        alert("‚ùå –ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.");
        return;
    }

    const uploadFile = (file) => {
        const formData = new FormData();
        formData.append("photo", file);
        formData.append("email", userEmail);

        return fetch("/upload_photo", {
            method: "POST",
            body: formData
        })
        .then(res => res.json())
        .then(data => {
            if (data.status !== "success") {
                throw new Error(data.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
            }
        });
    };

    Promise.all(validFiles.map(uploadFile))
        .then(() => {
            return fetch("/api/get-profile", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email: userEmail })
            });
        })
        .then(res => res.json())
        .then(updated => {
            loadMedia(updated.profile);
            document.getElementById("uploadStatus").style.display = "none"; // ‚úÖ –≤–æ—Ç –∑–¥–µ—Å—å!
        })
        .catch(err => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ:", err);
            alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ.");
            document.getElementById("uploadStatus").style.display = "none"; // ‚úÖ –∏ –≤–æ—Ç –∑–¥–µ—Å—å ‚Äî –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
        });
});



document.getElementById("newVideos").addEventListener("change", function () {
console.log("üé• –í–∏–¥–µ–æ: –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å");
document.getElementById("uploadStatus").style.display = "block";
    const files = Array.from(this.files);
    if (!files || files.length === 0) return;

    const allowedTypes = ["video/mp4", "video/quicktime", "video/webm"];
    const maxSizeMB = 50;
    const maxFiles = 5;

    // ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
    if (files.length > maxFiles) {
        alert(`‚ùå –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º ${maxFiles} –≤–∏–¥–µ–æ –∑–∞ —Ä–∞–∑.`);
        return;
    }

    let validFiles = files.filter(file => {
        if (!allowedTypes.includes(file.type)) {
            alert(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: ${file.name}`);
            return false;
        }
        if (file.size > maxSizeMB * 1024 * 1024) {
            alert(`‚ùå ${file.name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${maxSizeMB}MB`);
            return false;
        }
        return true;
    });

    if (validFiles.length === 0) {
        alert("‚ùå –ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.");
        return;
    }

    const uploadFile = (file) => {
        const formData = new FormData();
        formData.append("video", file);
        formData.append("email", userEmail);

        return fetch("/upload_video", {
            method: "POST",
            body: formData
        })
        .then(res => res.json())
        .then(data => {
            if (data.status !== "success") {
                throw new Error(data.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
            }
        });
    };

    Promise.all(validFiles.map(uploadFile))
        .then(() => {
            return fetch("/api/get-profile", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email: userEmail })
            });
        })
        .then(res => res.json())
        .then(updated => {
            loadMedia(updated.profile);
        console.log("üé• –í–∏–¥–µ–æ: –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        document.getElementById("uploadStatus").style.display = "none";
        })
        .catch(err => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:", err);
            alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ.");
        document.getElementById("uploadStatus").style.display = "none";
        });
});



        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        document.getElementById("views_today").textContent = p.views_today || "0";
        document.getElementById("views_total").textContent = p.views_total || "0";

        // –°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã
        setupStatusButton(p);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        setupSaveButton(p);

    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", err);
        alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
function fillBasicProfile(p) {
    document.getElementById("username").value = p.username || "";
    document.getElementById("email").value = p.email || "";
    document.getElementById("profile_name").value = p.profile_name || "";
    document.getElementById("phone").value = p.phone || "";
    document.getElementById("country").value = p.country || "";
    document.getElementById("city").value = p.city || "";
    document.getElementById("district").value = p.district || "";
    document.getElementById("age").value = p.age || "";
    document.getElementById("height").value = p.height || "";
    document.getElementById("weight").value = p.weight || "";
    document.getElementById("eye_color").value = p.eye_color || "";
    document.getElementById("hair_color").value = p.hair_color || "";
    document.getElementById("hair_length").value = p.hair_length || "";
    document.getElementById("breast_size").value = p.breast_size || "";
    document.getElementById("breast_type").value = p.breast_type || "";
    document.getElementById("orientation").value = p.orientation || "";
    document.getElementById("nationality").value = p.nationality || "";
    document.getElementById("intim").value = p.intim || "";

    // üîò –ë—É–ª–µ–≤—ã —á–µ–∫–±–æ–∫—Å—ã
    document.getElementById("smoke").checked = p.smoke === true;
    document.getElementById("tattoo").checked = p.tattoo === true;
    document.getElementById("piercing").checked = p.piercing === true;
    document.getElementById("incall").checked = p.incall === true;
    document.getElementById("outcall").checked = p.outcall === true;

    // üí¨ –Ø–∑—ã–∫–∏
    document.getElementById("lang_georgian").value = p.languages?.georgian || "";
    document.getElementById("lang_russian").value = p.languages?.russian || "";
    document.getElementById("lang_english").value = p.languages?.english || "";
    document.getElementById("lang_azerbaijani").value = p.languages?.azerbaijani || "";

    // üìñ –û–ø–∏—Å–∞–Ω–∏–µ
    document.getElementById("about").value = p.about || "";

// ‚úÖ –û—Ç–º–µ—á–∞–µ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã
    console.log("üì® Messengers –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:", p.messengers);
    if (Array.isArray(p.messengers)) {
        const mess = p.messengers.map(m => m.toLowerCase());
        document.getElementById("messenger_whatsapp").checked = mess.includes("whatsapp");
        document.getElementById("messenger_telegram").checked = mess.includes("telegram");
    }

    // üí∞ –¶–µ–Ω—ã –∏ –≤–∞–ª—é—Ç–∞
    document.getElementById("currency").value = p.currency || "";
    document.getElementById("price_incall_1h").value = p.price_incall_1h || "";
    document.getElementById("price_incall_2h").value = p.price_incall_2h || "";
    document.getElementById("price_incall_24h").value = p.price_incall_24h || "";
    document.getElementById("price_outcall_1h").value = p.price_outcall_1h || "";
    document.getElementById("price_outcall_2h").value = p.price_outcall_2h || "";
    document.getElementById("price_outcall_24h").value = p.price_outcall_24h || "";

    // üîê –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã
    const status = p.status || "Hold";
    const topStatus = p.top_status === true;

    // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç <div id="status-badge">
    const badge = document.getElementById("status-badge");
    if (badge) {
        badge.textContent = status === "Active" ? "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" : "‚õî –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏";
        badge.className = status === "Active" ? "badge-active" : "badge-hold";
    }

    const topCheckbox = document.getElementById("top_status");
    if (topCheckbox) {
        topCheckbox.checked = topStatus;
    }
}


function loadMedia(p) {
       const photoContainer = document.getElementById("profilePhotos");
    photoContainer.innerHTML = "";
    (p.photos || []).forEach(url => {
        const wrapper = document.createElement("div");
        wrapper.className = "media-wrapper";
        const img = document.createElement("img");
        img.src = url;
        img.className = "profile-photo";
// üîò –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å –≥–ª–∞–≤–Ω—ã–º"
const mainBtn = document.createElement("button");
mainBtn.textContent = "–°–¥–µ–ª–∞—Ç—å –≥–ª–∞–≤–Ω—ã–º";
mainBtn.className = "main-photo-btn";
mainBtn.onclick = () => {
    fetch("/api/set-main-photo", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            email: userEmail,
            photo_url: url
        })
    })
    .then(res => res.json())
    .then(data => {
        if (data.status === "success") {
            alert("‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
            location.reload();
        } else {
            alert("‚ùå –û—à–∏–±–∫–∞: " + data.message);
        }
    })
    .catch(err => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ:", err);
        alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ.");
    });
};

// üåü –ï—Å–ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–º–µ—Ç–∫—É
if (url === p.main_photo_url) {
    const badge = document.createElement("div");
    badge.textContent = "üåü –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ";
    badge.className = "main-photo-badge";
    wrapper.appendChild(badge);
} else {
    wrapper.appendChild(mainBtn);
}

        const closeBtn = document.createElement("span");
        closeBtn.innerHTML = "&times;";
        closeBtn.className = "close-btn";
        closeBtn.onclick = () => {
            if (!confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ?")) return;
            console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ:", url);

            fetch("/delete_photo", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ photo: url })
            })
            .then(res => {
                if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
                return res.json();
            })
            .then(data => {
                if (data.status === "success") {
                    setTimeout(() => {
                        fetch("/api/get-profile", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({ email: userEmail })
                        })
                        .then(res => res.json())
                        .then(updated => {
                            loadMedia(updated);
                        });
                    }, 50);
                } else {
                    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ");
                }
            })
            .catch(err => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:", err);
                alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ");
            });
        };
        wrapper.appendChild(img);
        wrapper.appendChild(closeBtn);
        photoContainer.appendChild(wrapper);
    });

     const videoContainer = document.getElementById("profileVideos");
    videoContainer.innerHTML = "";
    (p.videos || []).forEach(url => {
        const wrapper = document.createElement("div");
        wrapper.className = "media-wrapper";
        const video = document.createElement("video");
        video.src = url;
        video.controls = true;
        video.className = "profile-video";
        const closeBtn = document.createElement("span");
        closeBtn.innerHTML = "&times;";
        closeBtn.className = "close-btn";
        closeBtn.onclick = () => {
            if (!confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ?")) return;
            console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ:", url);

            fetch("/delete_video", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ video: url })
            })
            .then(res => {
                if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
                return res.json();
            })
            .then(data => {
                if (data.status === "success") {
                    setTimeout(() => {
                        fetch("/api/get-profile", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({ email: userEmail })
                        })
                        .then(res => res.json())
                        .then(updated => {
                            loadMedia(updated);
                        });
                    }, 50);
                } else {
                    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ");
                }
            })
            .catch(err => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ:", err);
                alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ");
            });
        };
        wrapper.appendChild(video);
        wrapper.appendChild(closeBtn);
        videoContainer.appendChild(wrapper);
    });
}



function setupStatusButton(p) {
    const statusBtn = document.getElementById("pauseBtn");
    const freezeText = document.getElementById("freeze-status");
    let isFrozen = p.frozen;
    updateStatusButton();

    statusBtn.addEventListener("click", () => {
        const newFrozen = !isFrozen;
        fetch("/api/toggle-freeze", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ frozen: newFrozen, email: p.email })
        })
        .then(res => res.json())
        .then(data => {
            if (data.status === "success") {
                isFrozen = newFrozen;
                updateStatusButton();
                alert("–°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω");
            } else {
                alert("–û—à–∏–±–∫–∞: " + (data.message || "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"));
            }
        })
        .catch(err => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", err);
            alert("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç");
        });
    });

    function updateStatusButton() {
    const lang = localStorage.getItem("selectedLanguage") || "ru";
    const key = isFrozen ? "unpause" : "pause";

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    const text = window.translations?.[lang]?.[key] || (isFrozen ? "‚ñ∂ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É" : "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É");

    if (statusBtn) {
        statusBtn.textContent = text;
        statusBtn.setAttribute("data-translate", key); // –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
        statusBtn.classList.toggle("paused", isFrozen);
    }

    if (freezeText) {
        let freezeMessages = {
            ru: {
                active: "üü¢ –ê–Ω–∫–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ",
                paused: "üîí –ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç–∞ —Å —Å–∞–π—Ç–∞"
            },
            en: {
                active: "üü¢ Your profile is active and visible on the website",
                paused: "üîí Your profile is paused and hidden from the website"
            },
            ge: {
                active: "üü¢ ·Éê·Éú·Éô·Éî·É¢·Éê ·Éê·É•·É¢·Éò·É£·É†·Éò·Éê ·Éì·Éê ·Éú·Éê·É©·Éï·Éî·Éú·Éî·Éë·Éò·Éê ·É°·Éê·Éò·É¢·Éñ·Éî",
                paused: "üîí ·Éê·Éú·Éô·Éî·É¢·Éê ·É®·Éî·É©·Éî·É†·Éî·Éë·É£·Éö·Éò·Éê ·Éì·Éê ·Éì·É†·Éù·Éî·Éë·Éò·Éó ·É§·Éê·É†·É£·Éö·Éò·Éê ·É°·Éê·Éò·É¢·Éñ·Éî"
            }
        };

        const msg = isFrozen ? freezeMessages[lang]?.paused : freezeMessages[lang]?.active;
        freezeText.textContent = msg || "";
        freezeText.style.color = isFrozen ? "gray" : "green";
    }
}

}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
function setupSaveButton(p) {
    const saveBtn = document.getElementById("btn-save");
    if (saveBtn) {
        saveBtn.addEventListener("click", async function (event) {
            event.preventDefault();
            // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
            const age = parseInt(document.getElementById("age").value) || 0;
            if (age < 18) {
                alert("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 18 –ª–µ—Ç.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–æ–ª–æ—Å
            const hairLengthEl = document.getElementById("hair_length");
            const hairLength = hairLengthEl?.value.trim() || "";
            const allowedHairLengths = ["–ö–æ—Ä–æ—Ç–∫–∏–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–î–ª–∏–Ω–Ω—ã–µ"];
            if (hairLength !== "" && !allowedHairLengths.includes(hairLength)) {
                alert("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–ª–∏–Ω—ã –≤–æ–ª–æ—Å!");
                return;
            }

            const breastSize = document.getElementById("breast_size").value.trim();
if (!breastSize) {
    alert("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≥—Ä—É–¥–∏.");
    return; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω
}


            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const data = {
                username: document.getElementById("username").value,
                password: document.getElementById("password").value,
                email: document.getElementById("email").value,
                profile_name: document.getElementById("profile_name").value,
                phone: document.getElementById("phone").value,
                country: document.getElementById("country").value || p.country,
                city: document.getElementById("city").value,
                district: document.getElementById("district").value,
                age: parseInt(document.getElementById("age").value) || 0,
                height: parseInt(document.getElementById("height").value) || null,
                weight: parseInt(document.getElementById("weight").value) || null,
                eye_color: document.getElementById("eye_color").value,
                hair_color: document.getElementById("hair_color").value,
                hair_length: hairLength || null,
                breast_size: document.getElementById("breast_size").value,
                breast_type: document.getElementById("breast_type").value,
                orientation: document.getElementById("orientation").value,
                smoke: document.getElementById("smoke").value,
                tattoo: document.getElementById("tattoo").value,
                piercing: document.getElementById("piercing").value,
                intim: document.getElementById("intim").value,
                nationality: document.getElementById("nationality").value,
                languages: {
                    georgian: document.getElementById("lang_georgian").value,
                    russian: document.getElementById("lang_russian").value,
                    english: document.getElementById("lang_english").value,
                    azerbaijani: document.getElementById("lang_azerbaijani").value
                },
                services: Array.from(document.querySelectorAll('#services-container input[type="checkbox"]:checked'))
                    .map(cb => cb.value),
messengers: [
  document.getElementById("messenger_whatsapp").checked ? "WhatsApp" : null,
  document.getElementById("messenger_telegram").checked ? "Telegram" : null
].filter(Boolean),

                about: document.getElementById("about").value,
                incall: document.getElementById("incall").checked,
                outcall: document.getElementById("outcall").checked,
                currency: document.getElementById("currency").value,
                price_incall_1h: parseInt(document.getElementById("price_incall_1h").value) || null,
                price_incall_2h: parseInt(document.getElementById("price_incall_2h").value) || null,
                price_incall_24h: parseInt(document.getElementById("price_incall_24h").value) || null,
                price_outcall_1h: parseInt(document.getElementById("price_outcall_1h").value) || null,
                price_outcall_2h: parseInt(document.getElementById("price_outcall_2h").value) || null,
                price_outcall_24h: parseInt(document.getElementById("price_outcall_24h").value) || null
            };
	        console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å:", data);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            try {
                const response = await fetch("/api/update-profile", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();
                if (result.status === "success") {
                    alert("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
                } else {
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: " + result.message);
                }
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
                alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        });
    } else {
        console.warn("‚ùå –ö–Ω–æ–ø–∫–∞ btn-save –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.");
    }
}
